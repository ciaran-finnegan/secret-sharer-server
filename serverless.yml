app: rest-api-app
service: secret-sharer

# Create an optimized package for our functions
package:
  individually: true

plugins:
  # Package our functions with Webpack
  - serverless-bundle
  - serverless-offline
  # Load .env as environment variables
  - serverless-dotenv-plugin 

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-ciphers
  usersTableName: ${self:custom.stage}-users-table
  invitesTableName: ${self:custom.stage}-invites-table
  
provider:
  name: aws
  # development only, use --aws-profile profilename instead
  profile: ct-prod-serverless
  runtime: nodejs12.x
  stage: dev
  # development only
  region: ap-southeast-2
  tracing:
    apiGateway: true
    lambda: true

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    usersTableName: ${self:custom.usersTableName}
    invitesTableName: ${self:custom.invitesTableName}
    environment:  dev
    GETSECRET_URL: https://secret-sharer-client.s3-ap-southeast-2.amazonaws.com/getsecret.html?id=
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    freeSubscriptionPriceId: ${env:STRIPE_FREE_SUBSCRIPTION_PRICE_ID}
    proSubscriptionPriceId: ${env:STRIPE_PRO_SUBSCRIPTION_PRICE_ID}
    soloSubscriptionPriceId: ${env:STRIPE_SOLO_SUBSCRIPTION_PRICE_ID}
    freeMaxMonthlySecrets: ${env:STRIPE_FREE_MAX_MONTHLY_SECRETS}
    soloMaxMonthlySecrets: ${env:STRIPE_SOLO_MAX_MONTHLY_SECRETS}
    proMaxMonthlySecrets: ${env:STRIPE_PRO_MAX_MONTHLY_SECRETS}
    domainURL: ${env:DOMAIN_URL}
    COGNITO_REGION: ${env:COGNITO_REGION}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_APP_CLIENT_ID: ${env:COGNITO_APP_CLIENT_ID}
    COGNITO_IDENTITY_POOL_ID: ${env:COGNITO_IDENTITY_POOL_ID}
    SLS_DEBUG: ${env:SLS_DEBUG}
    
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:SendRawEmail"
      Resource: "*"
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: ["arn:aws:ssm:*:*:*"]
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Development only, restrict for production
      Resource: "arn:aws:dynamodb:ap-southeast-2:*:*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
      Resource: ["arn:aws:cognito-idp:ap-southeast-2:*:*"]
functions:
  get-subscription-status:
    handler: get-subscription-status.main
    events:
      - http:
          path: getSubscriptionStatus
          method: post
          cors: true
          authorizer: aws_iam
  create:
    handler: create.main
    events:
      - http:
          path: putSecret
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: getsecret
          method: post
          cors: true
          # authorizer: aws_iam (not auth  for dev, consider for  production)

  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
  create-checkout-session:
    # Defines an HTTP API endpoint that calls the main function in create-checkout-session.js
    # - path: url path is /create-checkout-session
    # - method: POST request
    handler: create-checkout-session.main
    events:
      - http:
          path: create-checkout-session
          method: post
          cors: true
          authorizer: aws_iam

  checkout-session:
    # Defines an HTTP API endpoint that calls the main function in checkout-session.js
    # - path: url path is /checkout-session
    # - method: POST request
    handler: checkout-session.main
    events:
      - http:
          path: checkout-session
          method: post
          cors: true
          authorizer: aws_iam

  create-billing-portal-session:
    # Defines an HTTP API endpoint that calls the main function in create-checkout-session.js
    # - path: url path is /create-checkout-session
    # - method: POST request
    handler: create-billing-portal-session.main
    events:
      - http:
          path: create-billing-portal-session
          method: post
          cors: true
          authorizer: aws_iam

  create-stripe-customer:
    # Defines an HTTP API endpoint that calls the main function in create-checkout-session.js
    # - path: url path is /create-checkout-session
    # - method: POST request
    handler: create-stripe-customer.main
    events:
      - http:
          path: create-stripe-customer
          method: post
          cors: true
          authorizer: aws_iam
  stripe-webhook-OLD:
    # This is the one Ryan setup, it was working but isn't now, no idea why, replaced with a stanard REST endpoint below
    # Defines an HTTP API endpoint that calls the main function in stripe-webhook.js
    # - path: url path is /stripe-webhook
    # - method: POST request
    handler: stripe-webhook.main
    events:
      - httpApi:
          method: POST
          path: /webhooks/{service}
          # cors: true
          # private: false
          
  stripe-webhook:
    # Defines an HTTP API endpoint that calls the main function in stripe-webhook.js
    # - path: url path is /stripe-webhook
    # - method: POST request
    # - this is a public endpoint, stripe signing secret must be validated
    handler: stripe-webhook.main
    events:
      - http:
          path: stripe-webhook
          method: post
          cors: true
  
  get-team-invites:
    handler: get-team-invites.main
    events:
      - http:
          path: invites/get
          method: post
          cors: true
          authorizer: aws_iam

  send-team-invite:
    handler: send-team-invite.main
    events:
      - http:
          path: invites/send
          method: post
          cors: true
          authorizer: aws_iam
  resend-team-invite:
    handler: resend-team-invite.main
    events:
      - http:
          path: invites/resend
          method: post
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}

# Enable detailed metrics that can be used for monitoring and alerting in Cloudwatch
httpApi:
  metrics: true

# Enable access logging for httpAPI
logs:
  httpApi: true
